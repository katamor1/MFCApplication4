
---

## ソフトウェア仕様書: ソフトウェアキーボード

### 1. 概要

#### 1.1. ソフトウェアの目的
本ソフトウェアは、アプリケーションのメインウィンドウに配置されたエディットコントロールへのテキスト入力を支援するためのソフトウェアキーボードを提供する。物理キーボードが使用できない環境や、タッチ操作が主体のデバイスにおいて、マウス操作による文字入力を可能にすることを目的とする。

#### 1.2. 適用範囲
本仕様書は、指定のメインウィンドウ内に実装されるソフトウェアキーボードの設計と動作を定義する。対象となる入力先は、メインウィンドウ上に配置された特定のエディットコントロールのみとする。

### 2. アーキテクチャ

#### 2.1. 全体構成
本機能は、既存のメインアプリケーション（以下、親ウィンドウ）と、そこから呼び出されるモーダルダイアログ（ソフトウェアキーボード）によって構成される。

* **親ウィンドウ**: ソフトウェアキーボードの入力対象となるエディットコントロールを持つ。
* **ソフトウェアキーボード**: `CDialog`ベースのモーダルダイアログとして実装し、キーボードのUIと入力ロジックを持つ。

#### 2.2. 採用アーキテクチャ
MFC (Microsoft Foundation Class) ライブラリを使用する。
* **アプリケーション形態**: SDI, MDI, またはダイアログベースのいずれの親ウィンドウにも組み込み可能とする。
* **ソフトウェアキーボード**: **ダイアログベース** (`CDialogEx`クラス) を採用する。これにより、独立したウィンドウとしての振る舞いと、モーダル実行による確実な入力フロー制御を実現する。

### 3. 機能要件

#### 3.1. 表示と終了
| ID | 機能 | 詳細 |
| :--- | :--- | :--- |
| FR-1 | **フォーカスによる表示** | 親ウィンドウのエディットコントロールがフォーカスを受け取った際、ソフトウェアキーボードをモーダルダイアログとして表示する。 |
| FR-2 | **Enterキーによる確定終了** | `Enter`キーを押すと、ダイアログを閉じる。エディットコントロールの内容は維持され、フォーカスが外れる。 |
| FR-3 | **Escキーによるキャンセル終了** | `Esc`キーを押すと、ダイアログを閉じる。エディットコントロールの内容を、キーボード表示前の状態に復元し、フォーカスを外れる。 |
| FR-4 | **閉じるボタンによるキャンセル終了** | キーボード上部の「×」ボタンを押すと、`Esc`キーと同様の動作（FR-3）を行う。 |

#### 3.2. キーボード操作
| ID | 機能 | 詳細 |
| :--- | :--- | :--- |
| FR-5 | **ドラッグによる移動** | キーボード上部の青いバー領域をマウスでドラッグすることで、親ウィンドウのクライアント領域内でキーボードを移動できる。 |

#### 3.3. キー入力動作
| ID | 機能 | 詳細 |
| :--- | :--- | :--- |
| FR-6 | **文字・記号・コマンドキー入力** | 英字、数字、記号、`Tab`, `Space`, `Delete`, `Backspace`キーを押すと、対応するキーイベントをエディットコントロールに送信する。 |
| FR-7 | **状態保持キー（トグル）** | `Caps Lock`, `Shift` (左右), `Ctrl` (左右), `Fn`, `Alt` (左右) キーはトグル式とする。押下されるとON/OFFが切り替わり、ONの状態ではキーが青色で表示される。 |
| FR-8 | **Shift/Caps Lock連動** | `Shift`キーまたは`Caps Lock`キーがONの状態では、英字キーは大文字を、数字・記号キーは代替文字（キー右下に表示）を入力する。 |

### 4. 画面仕様

#### 4.1. メインウィンドウ
* ソフトウェアキーボードの入力対象となる `CEdit` コントロールが1つ以上配置される。

#### 4.2. ソフトウェアキーボード ダイアログ

##### 4.2.1. レイアウトとサイズ
* **ダイアログ全体**:
    * 枠線なしのポップアップウィンドウとする。
    * 計算上のサイズ: 幅 **524px** × 高さ **208px**
        * 幅: `(キー幅34px * 15キー) + (隙間1px * 14) = 524px`
        * 高さ: `(タイトルバー高34px) + (キー高34px * 5段) + (隙間1px * 4) = 208px`
* **キー**:
    * サイズ: **34px × 34px** の正方形。
    * 間隔: キー間の隙間は縦横ともに **1px**。

##### 4.2.2. タイトルバー
* **領域**: ダイアログ上部に、高さ **34px** の領域を設ける。
* **背景色**: 青色 (例: `RGB(0, 102, 204)`)。
* **移動**: この領域をドラッグすることでダイアログを移動できる。
* **閉じるボタン**:
    * タイトルバーの右端に配置する。
    * サイズ: **30px × 30px** の正方形。
    * 機能: クリックするとキャンセル終了（FR-4）する。
    * 外観: ボタン内に「×」マークを描画する。

##### 4.2.3. キーのデザイン
* **通常キー**:
    * 背景色: グレー (例: `RGB(240, 240, 240)`)
    * 枠線: 暗いグレー (例: `RGB(173, 173, 173)`)
    * **英字キーラベル**: キーの中央に黒字で配置。
    * **数字/記号キーラベル**:
        * 通常ラベル: キーの左上に黒字で配置。
        * Shift時ラベル: キーの右下に灰色で配置。
* **状態保持キー (ON状態)**:
    * 背景色: 青色 (例: `RGB(0, 102, 204)`)
    * ラベル色: 白色

##### 4.2.4. キー配列
USキー配列を基本とし、要求事項に基づき以下の通り配置する。キーはオーナードローボタンで実装する。

```text
+-----+-------------------------------------------------------------------------------------------------------------------+
|     | [ESC] [`~] [1!] [2@] [3#] [4$] [5%] [6^] [7&] [8*] [9(] [0)] [-_] [=+] [Delete]                                    |
|     +-------------------------------------------------------------------------------------------------------------------+
|     | [Tab  ] [Q] [W] [E] [R] [T] [Y] [U] [I] [O] [P] [{[] [}]] [|\] [Backspace]                                        |
|     +-------------------------------------------------------------------------------------------------------------------+
|     | [Caps Lock] [A] [S] [D] [F] [G] [H] [J] [K] [L] [;:] ['"] [  Enter  ]                                              |
|     +-------------------------------------------------------------------------------------------------------------------+
|     | [L-Shift   ] [Z] [X] [C] [V] [B] [N] [M] [,<] [.>] [/?] [  R-Shift   ]                                              |
|     +-------------------------------------------------------------------------------------------------------------------+
|     | [L-Ctrl] [Fn] [L-Alt] [              Space              ] [R-Alt] [R-Ctrl]                                          |
+-----+-------------------------------------------------------------------------------------------------------------------+
※ []内上段が通常、下段がShift押下時のラベルを表すキーもある。
※ [Delete], [Backspace], [Enter], [Shift] など幅が広いキーは、複数のキー領域を結合して表現する。
※ 要求仕様に基づき、右端列は上から [Delete], [Backspace], [Enter], [R-Shift], [R-Ctrl] となるように配置している。
```

##### 4.2.5. 状態変化
* `Shift`キーまたは`Caps Lock`キーがONの場合、全英字キーのラベルは大文字で描画される。
* 状態保持キーがONの場合、該当キーの背景色が青色に変化する。

#### 4.3. 画面遷移図

```
+--------------------------+        EN_SETFOCUS         +------------------------------+
|   メインウィンドウ       | -------------------------> |   ソフトウェアキーボード     |
| (エディット非フォーカス) |                            |   (モーダル表示)             |
+--------------------------+        <------------------ |                              |
                             (フォーカス喪失)  |           +------------------------------+
                                             |                     |
                                             |                     | (Enterキー押下)
                                             |                     | -> IDOK
                                             |                     |
                                             | (Esc/×ボタン押下)
                                             | -> IDCANCEL
                                             | (テキスト復元)
                                             |
                                             v
                                 [ダイアログ終了処理]
```

### 5. クラス設計

#### 5.1. クラス図 (テキスト表現)
```
// 親ウィンドウのEditコントロールはCCenterEditに置き換える
CWnd (親ウィンドウ)
  │
  └─<> CCenterEdit (1)

// CCenterEditはフォーカス時にCSoftwareKeyboardDlgを呼び出す
CCenterEdit --uses--> CSoftwareKeyboardDlg

// CSoftwareKeyboardDlgはキーボードの本体
CDialogEx
  │
  └─ CSoftwareKeyboardDlg
       │
       └─<> CKeyButton (多数)

// CKeyButtonは個々のキー
CButton
  │
  └─ CKeyButton
```

#### 5.2. `CMainFrame` (仮)
親ウィンドウのクラス。ソフトウェアキーボードの入力対象となる`CCenterEdit`クラスのインスタンスをメンバ変数として保持する。

#### 5.3. `CCenterEdit`
`CEdit`から派生したカスタムコントロールクラス。

* **役割**: フォーカス取得を検知し、ソフトウェアキーボードダイアログを起動する。
* **主要メンバ変数**:
    * `CString m_strOriginalText`: フォーカス取得時のテキストを保存する。
* **主要メンバ関数**:
    * `afx_msg void OnSetFocus(CWnd* pOldWnd)`: `WM_SETFOCUS`メッセージハンドラ。
        1.  現在のテキストを `m_strOriginalText` に保存する。
        2.  `CSoftwareKeyboardDlg` のインスタンスを生成し、モーダルで表示 (`DoModal()`) する。
        3.  戻り値が `IDCANCEL` の場合、`m_strOriginalText` の内容でテキストを復元する。

#### 5.4. `CSoftwareKeyboardDlg`
`CDialogEx`から派生した、ソフトウェアキーボード本体のクラス。

* **役割**: キーのレイアウト、描画、入力イベントの処理、ダイアログの移動を担当する。
* **主要メンバ変数**:
    * `CArray<CKeyButton*, CKeyButton*>` `m_KeyButtons`: キーボタンのインスタンスを管理する配列。
    * `BOOL m_bShiftOn`, `m_bCapsLockOn`, `m_bCtrlOn`, ...: 状態保持キーのON/OFF状態を管理するフラグ。
    * `CPoint m_ptMouseOffset`: ダイアログ移動計算用のマウスオフセット。
* **主要メンバ関数**:
    * `virtual BOOL OnInitDialog()`: ダイアログの初期化。キー配列データに基づき `CKeyButton` を動的に生成・配置する。
    * `virtual void OnPaint()`: タイトルバーなど、カスタム描画領域を描画する。
    * `afx_msg void OnLButtonDown/OnMouseMove/OnLButtonUp`: ダイアログのドラッグ移動を実装する。
    * `afx_msg void OnKeyClick(UINT nID)`: 全てのキーボタンからのクリック通知を処理する。
        * `nID`から押されたキーを特定し、キーの種類に応じて処理を分岐する。
        * 文字キーの場合: `SendInput()` API を使用して、親ウィンドウのエディットコントロールにキーイベントを送信する。状態保持キーのフラグを `SendInput` のパラメータに反映させる。
        * 状態保持キーの場合: 対応するフラグをトグルし、`Invalidate()`で再描画を促す。
    * `afx_msg void OnCloseButton()`: 「×」ボタン用のハンドラ。`EndDialog(IDCANCEL)`を呼び出す。

#### 5.5. `CKeyButton`
`CButton`から派生したオーナードローボタンクラス。

* **役割**: 1つ1つのキーの描画と情報を保持する。
* **主要メンバ変数**:
    * `KEY_INFO m_KeyInfo`: キーの属性（仮想キーコード、ラベル等）を保持する構造体。
* **主要メンバ関数**:
    * `virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct)`: `BS_OWNERDRAW` スタイルを持つボタンの描画処理を実装する。
        * `m_KeyInfo` とダイアログの状態（Shift ON/OFFなど）に応じて、キーの背景、枠線、ラベル（通常、Shift時）を描画する。

### 6. データ構造

#### 6.1. キー情報構造体
各キーの属性を定義するための構造体。

```cpp
// キーの種類を定義
enum EKeyType {
    KT_NORMAL,      // 英字、数字、記号など
    KT_MODIFIER,    // Shift, Ctrl, Alt などの状態保持キー
    KT_ACTION,      // Enter, Esc, Backspace などの特殊動作キー
};

// キー情報を保持する構造体
struct KEY_INFO {
    UINT    uId;             // ボタンのコントロールID
    LPCWSTR szLabel;         // 通常時のラベル
    LPCWSTR szShiftLabel;    // Shiftキー押下時のラベル
    BYTE    bVirtKey;        // 仮想キーコード (VK_...)
    BYTE    bScanCode;       // スキャンコード
    EKeyType eKeyType;       // キーの種類
    int     nColumnSpan;     // キーの横幅（標準キー何個分か）
};
```
この構造体の配列としてキーボード全体のレイアウトを定義し、ダイアログ初期化時に利用する。

### 7. 非機能要件

#### 7.1. ターゲット環境
* **OS**: Windows 10, Windows 11
* **開発環境**: Visual Studio 2019 以降
* **フレームワーク**: Microsoft Foundation Class (MFC)

#### 7.2. パフォーマンス
* キーを押下してからエディットコントロールに文字が反映されるまでの遅延は、ユーザーが体感できないレベル（目安として50ms以内）であること。
* ダイアログのドラッグ移動がスムーズに行われること。

#### 7.3. エラー処理
* キーイベントの送信に失敗した場合（`SendInput` API のエラーなど）、デバッグログに出力する。ユーザーへのエラー通知は原則として行わない。

---
